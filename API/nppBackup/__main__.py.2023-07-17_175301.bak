# -*- coding: UTF-8 -*-
#configurations Lib for QaYeApps
##Programming and Development by: Qadary-Yemen(QaYe)<qadary.yemen@gmail.com>

import sys,os # assensials libs importd.

#Main App Vars for Controled.
AppInfo={'Name':"QaYeApps",'FullName':"Qadary-Yemen Applications platform",'Version':5.0,"Script":"Main","PID":os.getpid(),"DevBy":["+967-77-5558-260","t.me/QaYeDev",'qadary.yemen@gmail.com']}
ZeroClick=True # App userInterface Mode.

#Main Code.
# required Vars for used in App.
PT,CS,TM,CB,newLine='','','','',"\n"

#setup Time
from time import sleep, strftime
from datetime import datetime as DT,timedelta 
import pytz
DTN = DT.now()
DTF = DTN.utctimetuple()
##Setup Sleepper.
import inspect

DELAYED_PROCESSES = {}

def Delay(seconds=0.05, dps=66,process_name=''):
	try:
		seconds = round(abs(seconds),3)
	except ValueError:
		Logger(f"Error: Invalid value for seconds argument. Defaulting to 0.18 second delay.", 30, "DelayLogs")
		seconds = 0.18

	if seconds < 0:
		Logger(f"Error: seconds argument must be a non-negative value. Defaulting to 0.19 second delay.", 30, "DelayLogs")
		seconds = 0.02
	try:
		if not process_name:
			calling_frame = inspect.currentframe().f_back
			calling_file = calling_frame.f_globals.get('__file__')
			calling_module = inspect.getmodulename(calling_file)
			calling_object = calling_frame.f_code.co_name
			if calling_object == '<module>':
				process_name = calling_module
			else:
				process_name = calling_object
	except Exception as exMessage:
		process_name=inspect.stack()[1].function
		if not process_name:
			process_name = "Process"

		# Logger(f"Warning: process_name argument cannot be empty. Using default process name: {process_name}", 30, "DelayLogs")

	# Check if this process has been delayed in the last hour
	if process_name in DELAYED_PROCESSES:
		last_delayed_time = DELAYED_PROCESSES[process_name]
		if DT.now() - last_delayed_time < timedelta(hours=1):
			#Logger(f"{process_name} has already been delayed within the last hour. Skipping delay.", 30, "DelayLogs")
			seconds=(round(CounterPID(seconds,dps,False),3));sleep(seconds)
			return

	Logger(f"Delaying {process_name} for {seconds} seconds...", 30, "DelayLogs")
	sleep(seconds)
	#Logger(f"{process_name} has completed the delay.", 30, "DelayLogs")

	# Save the process name and the time it was delayed
	DELAYED_PROCESSES[process_name] = DT.now()
##setup Timer Dict and function for All operations.
from dateutil.relativedelta import relativedelta
DTW = DT.utctimetuple
Timers = {'O': {'ST': '', 'ET': '', 'WT': 0}}

def Timer(TW={'O':'Main','T': 0}, Unit='seconds'):
	global Timers
	Op = TW['O']
	if Op not in Timers:
		Timers[Op] = {'ST': '', 'ET': '', 'WT': 0}
	if TW['T'] == 0:
		Timers[Op]['ST'] = strftime("%Y-%m-%d %I:%M:%S %p", DT.now().utctimetuple())
	else:
		Timers[Op]['ET'] = strftime("%Y-%m-%d %I:%M:%S %p", DT.now().utctimetuple())
		diff = DT.strptime(Timers[Op]['ET'], "%Y-%m-%d %I:%M:%S %p") - DT.strptime(Timers[Op]['ST'], "%Y-%m-%d %I:%M:%S %p")
		if Unit == 'seconds':
			Timers[Op]['WT'] = diff.total_seconds()
		elif Unit == 'minutes':
			Timers[Op]['WT'] = diff.total_seconds() / 60
		elif Unit == 'hours':
			Timers[Op]['WT'] = diff.total_seconds() / 3600
		elif Unit == 'days':
			Timers[Op]['WT'] = diff.days
		elif Unit == 'months' or Unit == 'years':
			rd = relativedelta(DT.strptime(Timers[Op]['ET'], "%Y-%m-%d %I:%M:%S %p"), DT.strptime(Timers[Op]['ST'], "%Y-%m-%d %I:%M:%S %p"))
			if Unit == 'months':
				Timers[Op]['WT'] = rd.months + (rd.years * 12)
			elif Unit == 'years':
				Timers[Op]['WT'] = rd.years
		else:
			raise ValueError("Invalid time unit specified")
		if Timers[Op]['WT'] < 0:
			#raise ValueError("End time is before start time")
			Timers[Op]['WT']=abs(Timers[Op]['WT'])
		return Timers[Op]['WT']
"""

# Example usage
Timer({'O': 'Main', 'T': 0}) # start the timer for the operation
Delay(60) # simulate some operation for 60 seconds
Timer({'O': 'Main', 'T': 1}) # end the timer for the operation
print(Timers['Main']['WT']) # print the time difference in seconds
"""

# دالة تحويل التاريخ والوقت من منطقة لمنطقة أخرى.
def ConvertTimezone(time_string, from_tz='UTC', to_tz='Asia/Riyadh'):
	# تحديد المنطقة الزمنية المرسلة
	from_timezone = pytz.timezone(from_tz)
	# تحديد المنطقة الزمنية المستقبلة
	to_timezone = pytz.timezone(to_tz)
	# تحويل الوقت إلى datetime object
	time_object = DT.strptime(time_string, "%Y-%m-%d %I:%M:%S %p")
	# تحديد المنطقة الزمنية للـ time object
	time_object = from_timezone.localize(time_object)
	# تحويل الوقت إلى المنطقة الزمنية المستقبلة
	converted_time = time_object.astimezone(to_timezone)
	return converted_time.strftime("%Y-%m-%d %I:%M:%S %p")


#Setup Logger.
import logging,traceback
DTL=str(f"D{DTF[2]}M{DTF[1]}Y{DTF[0]}")
LoggerEnable=False
LO={} # Dict for stoares Main info on Logger.
errorCount=0
errorCode = ""  # إضافة متغير للكود الذي فيه الخطأ
suggestedCodeFix = "" # إضافة متغير للحل المقترح للكود الخاطئ
# تعريف دالة اللوجر وإدراج معلومات الخطأ عند الحدوث
def Logger(logMessage='', logLevel=50, logFrom="MainLogs", to=False, OL=[False,"LD"]):
	global LoggerEnable, LO,errorCount, errorCode, suggestedCodeFix
	try:
		if LoggerEnable == False:
			LoggerEnable = True
		logging.basicConfig(format=logging.BASIC_FORMAT, level=logLevel)
		logger = logging.getLogger(logFrom)
		logger.setLevel(logLevel)
		LoggerEnable = False
		if logLevel == 40:
			exMessage = logMessage
			errorCount += 1
			errorInfo = str(exMessage)
			errorType = str(type(exMessage).__name__)
			errorLocation = str(exMessage.__traceback__.tb_frame.f_code.co_filename)
			errorLine = str(exMessage.__traceback__.tb_lineno)
			errorCode = ""  # إعادة تعيين المتغير للاستخدام الجديد
			# الحصول على الكود الخاطئ من السطر المحدد
			with open(errorLocation) as f:
				#errorFullCode=f.read() # Store All Codes in File has Error for review.
				for i, line in enumerate(f):
					if i == int(errorLine) - 1:
						errorCode = line.strip()
						f.close()
						break
			# التحقق من وجود حل مقترح للكود الخاطئ
			tb = traceback.TracebackException.from_exception(exMessage)
			exc_type = tb.exc_type
			cause = tb.__cause__
			context = tb.__context__
			if cause is not None:
				exc_info = (cause.__class__, cause, cause.__traceback__ if hasattr(cause,'__traceback__') else cause.__traceback_supplement__)
				suggestedCodeFix = f"{exc_type.__name__}: {cause}"
			elif context is not None:
				exc_info = (context.__class__, context, context.__traceback__  if hasattr(context,'__traceback__') else context.__traceback_supplement__)
				suggestedCodeFix = f"{exc_type.__name__}: {context}"
			else:
				exc_info = None
				suggestedCodeFix = ""
			if exc_info is not None:
				suggestedCodeFix += "\n" + traceback.format_exception_only(*exc_info)[-1].strip()
			try:
				suggestedCodeFix += "\n" + traceback.format_exc().split("\n")[-2]
			except:
				pass
			errorNote = suggestedCodeFix if suggestedCodeFix else '' # إضافة حل للكود الخاطئ إن كان ممكناً.
			logMessage = f" Error#{errorCount}\n Type:{errorType}\n Location:{errorLocation}\n Line:{errorLine}\n Code: {errorCode}\n Info:{errorInfo}{str(newLine + errorNote) if not errorInfo in errorNote else ''}"
			#logger.error(exMessage, exc_info=True)
			# إضافة رسالة تنبيهية إذا كان هناك حل متوفر للكود الخاطئ
			if suggestedCodeFix and suggestedCodeFix!='':
				Clk=Lib('click')[1]
				Clk.secho(f"Error#{errorCount}@{errorLocation}\n{errorLine}", fg='yellow', bold=True)
				Clk.echo(f"InCode: {errorCode}")
				Clk.echo_via_pager(suggestedCodeFix, color=True )
		# قسم حفظ السجل.
		if 'putLogs' in logFrom:
			logType = "txt"
		else:
			logType = "log"
		YLogDir = AppDirs(os.path.join(LogDir, fr"{DTF[0]}Y"))
		MLogDir = AppDirs(os.path.join(LogDir, fr"{DTF[0]}Y/{DTF[1]}M"))
		if(LO.get(logType)==None): LO.update({logType:['','']})
		lo=[logFrom,str(logging.getLevelName(logLevel)).upper()]
		logStrings = F"\n{(str(lo[0]) if not lo[0] in LO[logType][0] else '.')}{('_'+str(lo[1]) if not lo[1] in LO[logType][1] else ' ')}@{strftime('%H:%M:%S')}  =\n{str(logMessage)}"
		LF=os.path.join(MLogDir, f"{DTL}.{logType}")
		with cds.open(LF, 'a+b', encoding='utf-8') as lf:
			lf.seek(0) # Move the file pointer to the beginning of the file
			if not lf.readline(): # Check if the file is empty
				lf.write(f"#{AppInfo['Script']}:{AppInfo['Name']}V{AppInfo['Version']}@{DTL}\n") # Write the comment if the file is empty
			lf.writelines(logStrings) # Write the log lines
			#lf.close() # Close the file after finishing the work on it
			LO.update({logType:lo}) #update Logger operation.
			if OL[0] == True:
				ol={"LD":LogDir,"YLD":YLogDir,"MLD":MLogDir,"LF":LF}
				if(ol.get(OL[1])==None):
					return Logger(f"{OL[1]}! not Caps found for any option for Logs Opener. use MonthLogDir asDefault Mode",10,OL=[True,"MLD"])
				if sys.platform == "win32":
					os.startfile(ol[OL[1]])
				elif sys.platform == "darwin":
					os.system("open " + ol[OL[1]])
				else:
					os.system("xdg-open " + ol[OL[1]])
		if to == True:
			Delay(0.036)
	except Exception as exMessage:
		SPV(st=True, vw='T', tl=False, tts="logError"+str(exMessage))


#Setup Texts & Speech features.
# Got this from https://stackoverflow.com/a/43952192/13276219
def print_statusline(msg: str):
	last_msg_length = len(print_statusline.last_msg) if hasattr(print_statusline, 'last_msg') else 0
	print(' ' * last_msg_length, end='\r')
	print(msg, end='\r')
	sys.stdout.flush()
	print_statusline.last_msg = msg

tm={0:'in',1:'out'}
def SPV(tts='',st=False,vw='T',m=1,tl=True,sr=9.8,sv=60,wud=1):
	try:
		if(vw=='TS'):
			import win32com.client as wincl
			speak = wincl.Dispatch("SAPI.SpVoice")
			speak.Rate=sr
			speak.Volume=sv
			speak.WaitUntilDone(wud)
	except Exception as exMessage:
		Logger(exMessage,40,"SAPIEnjinExceptions")
		return False
	else:
		if(m==1):
			if(st==True): print(f"{tts}")
			elif(st==False): print_statusline(str(tts))
			ti=' '
		if(vw=='TS'): speak.Speak(f"{tts}")
		if(m==0):
			ti=input(tts)
		if(tl==True): Logger(f"{tts} {ti}",10,f"{tm[m]}putLogs")
		if(m==0):
			return ti
		else:
			pass

#Main Setup.
try:
# Checken Python version and environment.
	if(int(sys.version[:1])<3):
		SPV(st=True,vw='T',tl=False,tts="please use the tool with Python3...\n Very thanks for trying  used with Python2. \n Special Thanks: Software Engineer/Salah Ahssan Hussain Qadary.")
		Delay(1.0)
		sys.exit()
	from API.PyLibsChecker import IIL as Lib # import Installer and Importer function.
	#,,pyautogui as PAG,win32api as w32a,numpy
	import random # main Line for importing requirement Modules with App.
	Threads=Lib('threading')[1]
	cds=Lib('codecs')[1]
	DENV=Lib('dotenv')[1]

except ImportError as exMessage:
	SPV(st=True,vw='TS',tl=False,tts=f"some required libs not found... Try auto installing: {exMessage.name} now... please waite.")
	IOS=os.system(f"pip install {exMessage.name}")
	if(IOS==0):
		SPV(st=False,vw='TS',tl=False,tts="installation Libs is done; waiting until ReImports to App.")
		IL=True
	elif(IOS==1):
		SPV(st=False,vw='TS',tl=False,tts="could not installation Libs: "+str(exMessage))
		IL=False
else:
	SPV(st=False,vw='T',tl=False,tts="All Libs is Imported.")
	os.system(f"title={AppInfo['Name']}{AppInfo['Script']}{AppInfo['Version']}")
	IL=True;#"NoOption=True"





#Setup Keybaord.
KBP=0
def KeyPress():
	global KBP
	KB=Lib('keyboard')[1]
	SPV(st=True,vw='T',tl=True,tts='at any time... can You pressed on 'r' letter 3 times for remove Main Configuerations or h to get helps')
	while KB.read_key():  # making a loop
		if(KB.is_pressed('H')):
			SPV(st=False,vw='T',tl=True,tts="press on: A to take About, H to help, RRR to Reconfiguer, QQQ to quit. ")
		elif KB.is_pressed('r'):  # if key 'r' is pressed 
			KBP+=1
			SPV(st=False,vw='T',tl=True,tts=str(KBP))
			if(KBP>2): 
				KBP=0
				OS('RC')
			#break  # finishing the loop
		elif(KB.is_pressed('Q')): 
			KBP+=1
			SPV(st=False,vw='T',tl=True,tts=str(KBP))
			if(KBP>2):
				KBP=0
				SE()
		"""else:
			#break  # if user pressed a key other than the given key the loop will break
			SPV(st=True,vw='T',tl=True,tts="press on: A to take About, H to help, RRR to Reconfiguer, QQQ to quit. ")"""

def KeySwitch(KL): # KeyLaighout switch function.
	if(KL=='En'): w32a.LoadKeyboardLayout('00000409',1) # to switch to english
	if(KL=='Ar'): w32a.LoadKeyboardLayout('00000401',1) # to switch to arabic


#اكواد تسريع العمليات.
multiprocessing=Lib('multiprocessing')[1]
asyncio=Lib('asyncio')[1]
concurrentFutures=Lib('concurrent.futures')[1]
"""from queue import Queue"""
#numba=Lib('numba')[1]


try:
	EF={} #list for storing Functions Execked.

	#numba.jit(nopython=True)
	def ExecFunctions(FN=None, FP=None, FL=False, num_processes=1):
		try:
			#numba.jit(nopython=True)
			if FL:
				loop = asyncio.new_event_loop()
				#asyncio.set_event_loop(loop)
				loop.run_in_executor(None, FN, FP)
			else:

				# تكرار تشغيل الدالة بشكل متكرر وانتظار الانتهاء من العملية قبل البدء في العملية التالية
				for i in range(num_processes):
					p = multiprocessing.Process(target=FN, args=(FP,))
					p.start()
					p.join()
		except Exception as exMessage:
			Logger(exMessage, 40, 'ExecFunctions')
			return [False,exMessage]
		finally:
			if FL:
				if(loop):
					EF.update({(len(EF) if type(FP)!=type(list()) else FP[0]):loop})
				return [True,loop]
			else:
				return [True,p]
	
	def ExitFunctions():
		try:
			global ef,oef,nef,pef
			if(len(EF)>0):
				oef=len(EF);nef=len(EF);pef=0
				SPV(f"Closing: {oef} operations.")
				CEF={};CEF.update(EF)
				for ef in CEF:
					if(EF[ef]):
						EF[ef].stop();EF[ef].close()
						del EF[ef]
					nef=len(EF)
					if(CPercentage(oef,nef)>1.0):
						oef=len(EF);pef+=CPercentage(oef,nef)
						MTB(pef,43*pef)
		except Exception as exMessage:
			Logger(exMessage,40,'ExitFunctions')
		finally:
			return True
except Exception as exMessage:
	Logger(exMessage,40,'LoopperFunctions')




#Setup Counter.
def CPercentage(num1=1, num2=1,num3=3):
	try:
		if(len(str(num1)) and len(str(num2))):
			num1,num2=abs(num1),abs(num2)
			percentage = round(abs(num1 - num2) / ((num1 + num2) / 2) * 100,num3)
			return percentage
		else:
			return CPercentage(SPV(m=0,tts="enter Num1"),SPV(m=0,tts="enter Num2"))
	except Exception as exMessage:
		Logger(exMessage,40,'CPercentage')


def CounterPID(number=100, percentage=1, is_increase=True): # Calculation of percentage increase and decrease
	try:
		result = number * percentage / 100
		if is_increase:
			new_number = number + result
		else:
			new_number = number - result
		formatted_result = "{:.{digits}f}".format(float(new_number), digits=len(str(float(number)).split('.')[1]))
		return float(formatted_result)
	except Exception as exMessage:
		Logger(exMessage,40,'CounterPID')

# Config App ReSources and directories.
def AppDirs(DN):
	DN=os.path.join(DN)
	if(ZeroClick==True): DN=os.path.join(os.getcwd(),DN)
	if( not os.path.exists(DN)): os.mkdir(DN)
	if(os.path.exists(DN)):
		return DN
	else:
		SPV(st=True,vw='T',tl=True,tts="{DN} not created.")
		Delay(5.0)



AppDir=AppDirs((os.path.join("."+AppInfo['Name']) if ZeroClick else os.path.join(os.environ.get("programdata"),AppInfo['Name'])))
LogDir=AppDirs(os.path.join(AppDir,r"Logs/"))
cfgDir=AppDirs(os.path.join(AppDir,r"Confs/"))
SCDir=AppDirs(os.path.join(AppDir,r"ScreenShots/"))

def Files(fP='',fN=None,fE='txt',fM='R+',Fc='UTF-8',fD=None):
	try:
		global FR
		if(fP and fN):
			if(os.exists(fP)):
				FP=os.path.join(fP,fN,fE)
				with cds.open(FP,mode=fM,encode=fC) as F:
					FR=F.readlines()
					if(fD): F.write(fD) 
					F.close()
				return True
			else:
				return Files(fP=fP,fN=fN,fE=fE,fM=fM,Fc=fC,fD=fD)
	except Exception as exMessage:
		Logger(exMessage,40,'Files')
		return False

CENV={} # Dict for ENVConfigs.
def FENV(P=os.path.join(AppDir,'.env'),K=None,V=None):
	try:
	
		if(os.path.exists(P)):
			o=[True,P]
			if(DENV.load_dotenv()):
				global CENV
				if(K and V):
					DENV.set_key(P,K,V)
					o=[True,K,V]
					Logger(f"{K}:{V}",20,"SetEnv")
				if(K):
					V=DENV.get_key(P,K)
					o=[True,V]
					Logger(f"{K}:{V}",20,"GetEnv")
	except Exception as exMessage:
		Logger(exMessage,40,"fENV:[P}")
		o=[False,P,None]
	else:
		if(o==[True,V]): CENV.update({K:V})
	return o
	
NoOption=False

#NoOption=FENV(K='NoOption')[1]



cfgObj=None
CT=''
def cfgWorker(cfgType,cfgSection='NoSection'):
	global cfgObj
	if(not cfgObj):
		config=Lib('configparser')[1]
		cfgObj=config.ConfigParser()
	global CT
	#if('Main' in cfgType): cfgSection='Main'
	cfgPath=os.path.join(cfgDir,cfgType+".ini")
	if(cfgType!=CT): cfgObj.clear()
	#if(cfgType=='Main'): cfgSection='Main'
	if(not os.path.exists(cfgPath)):
		#if(cfgType!=CT): cfgObj.clear()
		if(cfgSection!='NoSection'): cfgObj.add_section(cfgSection)
		#if(cfgType=='Main'): cfgObj.set(cfgType,'Info',str(AppInfo))
		cfgFound=False
	else:
		cfgObj.read(cfgPath)
		if(not 'NoSection' in cfgType and cfgObj.has_section(cfgSection)==False):
			cfgObj.add_section(cfgSection)
			cfgFound=False
			#return cfgFound
		else: cfgFound=True
		cfgObj.update()
	try:
		with open(cfgPath,"w+") as cfgFile:
			cfgObj.update()
			#cfgObj[cfgSection].update()
			cfgObj.write(cfgFile)
			cfgFile.close()
	except :
		SPV(st=True,vw='T',tl=True,tts=F"retrying set/update {cfgSection} Configurations after 5Sec.")
		Delay(0.5)
		cfgWorker(cfgType,cfgSection)
	CT=cfgType
	#cfgObj.clear()

	return cfgFound

srcPath=''
def cfgSources(srcDir='',srcFile='',so=True):
	from os import path
	global srcPath
	if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
		#SPV(st=True,vw='T',tl=True,tts='running in a PyInstaller bundle')
		srcPath= path.abspath(path.dirname(__file__))
	else:
		#SPV(st=True,vw='T',tl=True,tts='running in a normal Python process')
		srcPath=path.join(AppDir)
	src = path.join(srcPath,srcDir,srcFile)
	if(path.exists(src)==True):
		SPV(st=True,vw='T',tl=True,tts=srcDir+srcFile+"Linked in"+srcPath)
		return src
	else: SPV(st=True,vw='T',tl=True,tts=f"oh! {src} not linked")

def cfgTemps(TO=True,TD='Temps'):
	if(len(srcPath)<2): cfgSources()
	TD=os.path.join(srcPath,TD)
	if(TO==True):
		if(not os.path.exists(srcPath) or not os.path.exists(TD)): os.mkdir(TD)
		SPV(st=True,vw='T',tl=True,tts='new Temps path is added.')
		return TD
	elif(TO==False):
		import shutil
		if(os.path.exists(TD)): shutil.rmtree(TD, ignore_errors=True, onerror=None)
		Delay(1.7)
		SPV(st=True,vw='T',tl=True,tts='Temp files was cleared... and tempsPath removed.')

def OS(O,R=False):
	if(O=='VC'):
		with cds.open(os.path.join(cfgDir,CT+'.ini'),'r','utf8') as FVC:
			r=FVC.read()
			FVC.close()
		if(R==False):
			SPV(st=True,vw='T',tl=True,tts=r)
			input('press enter after read')
		else:
			return r
	if(O=='RC'):
		os.remove(os.path.join(cfgDir,CT+'.ini'))
		Delay(1.0)
		#os.popen(sys.executable)
		sys.exit(os.popen(sys.executable))


#Setup Tones.
TBEnable=False
def MTB(f=100,l=100,p=None,n=False):
	LN="TuneerLogs"
	try:
		global TBEnable,NoOption
		if(TBEnable==False and NoOption== False):
			WS=Lib('winsound')[1]
			#TBEnable=True
		if(NoOption==False):
			if(f==None): f=40
			if(l==None): l=40
			f=str(f).replace('.','')
			l=str(l).replace('.','')
			f=int(f if len(str(f))<6 else int(str(f)[:5]));l=int(l if len(str(l))<6 else int(str(l)[:5]))
			f=int(abs(f))
			l=int(abs(l))
			f=(f if f!=None else 22)
			l=(l if l!=None else 39)
			if(f<39): f=int((f)+39);
			if(f>32700): f=int(f/25);
			if(l<10): l=int(l+10);
			if(l>500): l=int(333);
			TL='' # var for save TuneerLogs.
			WS.Beep(int(abs(1+f)),int(abs(1+l)))
	except Exception as exMessage:
		LE=exMessage;LL=40
	else: LL=30
	finally:
		if not p and (LL==40 or n==True):
			try:
				calling_frame = inspect.currentframe().f_back
				calling_file = calling_frame.f_globals.get('__file__')
				calling_module = inspect.getmodulename(calling_file)
				calling_object = calling_frame.f_code.co_name
				if calling_object == '<module>':
					p= calling_module
				else:
					p= calling_object
			except Exception as exMessage:
				p=inspect.stack()[1].function
			if not p:
				p= "MainProcess"

		TL=fr"{str(newLine) if LL==40 else ''} T@F{f}:L{l}^{p}"
		if(LL==40 or n==True): Logger(TL if LL!=40 else LE,LL,f"{'``'+TL+'``'+newLine if LL==40 else ''} {p}")
		f,l=0,0;
#MTB(1000,110)


#System Exit and Restart function.
def SE(DT=True,SW='E',TO=False): #function for Exit or Restart Works; =TD:TempDelete,=SW:ShutdownWay
	try:
		SPV(st=True,vw='T',tl=True,tts=AppInfo['FullName']+"ended by request User. or some crashes.very thanks for using tool.\n contact with developer on: "+AppInfo['DevBy'][2])
		"""from QaYeApps_Client import WB,WP,PRD
		if(WB!='WB'): WB.quit()
		if(WP!='WP'):PRD(False)"""
		if(DT==True): cfgTemps(False)
	except BaseException as exMessage:
		Logger(exMessage,40,"mainCrashed")
	finally:
		if(TO==True): Delay(0.12)
		if(SW=='R'):
			os.popen(sys.executable)
			SPV('Restarting App.')
		else:
			input(f"press enter to quit from: {AppInfo['Name']} App.")
		try:
			sys.exit()
		except SystemExit:
			return 0

